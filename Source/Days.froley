--------------------------------------------------------------------------------
tokens
--------------------------------------------------------------------------------
IDENTIFIER identifier [content]
INTEGER    integer    [content]
MONTH      month      [content]

--------------------------------------------------------------------------------
tokens Keywords
--------------------------------------------------------------------------------
DAYS   days
MONTHS months
WEEKS  weeks
YEARS  years

TODAY     today
TOMORROW  tomorrow
YESTERDAY yesterday

HELP help

--------------------------------------------------------------------------------
tokens Symbols
--------------------------------------------------------------------------------
SYMBOL_CLOSE_PAREN          )
SYMBOL_COMMA                ,
SYMBOL_DOT                  .
SYMBOL_MINUS                -
SYMBOL_OPEN_PAREN           (
SYMBOL_PLUS                 +
SYMBOL_SLASH                /

--------------------------------------------------------------------------------
scanner
--------------------------------------------------------------------------------
- tokenize
  consume_whitespace
  markPosition
  if (not hasAnother) halt

  scan_identifier
  scan_symbol

  syntaxError

- consume_whitespace
  while (consume(' ') or consume('\t') or consume('\n') or consume('\r')) noAction
  return

- scan_identifier
  ch = peek
  if (scan [a-zA-Z_][a-zA-Z0-9_]*)
    match (buffer)
      produceAny Keywords

      # Tilde is used for case-insensitive comparisons
      case ~"January":   buffer=""; collect "1";  produce MONTH
      case ~"February":  buffer=""; collect "2";  produce MONTH
      case ~"March":     buffer=""; collect "3";  produce MONTH
      case ~"April":     buffer=""; collect "4";  produce MONTH
      case ~"May":       buffer=""; collect "5";  produce MONTH
      case ~"June":      buffer=""; collect "6";  produce MONTH
      case ~"July":      buffer=""; collect "7";  produce MONTH
      case ~"August":    buffer=""; collect "8";  produce MONTH
      case ~"September": buffer=""; collect "9";  produce MONTH
      case ~"October":   buffer=""; collect "10"; produce MONTH
      case ~"November":  buffer=""; collect "11"; produce MONTH
      case ~"December":  buffer=""; collect "12"; produce MONTH
      case ~"Jan":       buffer=""; collect "1";  produce MONTH
      case ~"Feb":       buffer=""; collect "2";  produce MONTH
      case ~"Mar":       buffer=""; collect "3";  produce MONTH
      case ~"Apr":       buffer=""; collect "4";  produce MONTH
      case ~"Jun":       buffer=""; collect "6";  produce MONTH
      case ~"Jul":       buffer=""; collect "7";  produce MONTH
      case ~"Aug":       buffer=""; collect "8";  produce MONTH
      case ~"Sep":       buffer=""; collect "9";  produce MONTH
      case ~"Oct":       buffer=""; collect "10"; produce MONTH
      case ~"Nov":       buffer=""; collect "11"; produce MONTH
      case ~"Dec":       buffer=""; collect "12"; produce MONTH
      case "day":        produce DAYS
      case "month":      produce MONTHS
      case "week":       produce WEEKS
      case "year":       produce YEARS
      case "d":          produce DAYS
      case "m":          produce MONTHS
      case "w":          produce WEEKS
      case "y":          produce YEARS
      case "mo":         produce MONTHS
      case "wk":         produce WEEKS
      case "h":          produce HELP
      others:            produce IDENTIFIER
    endMatch
  endIf
  return

- scan_symbol
  match input
    produceAny Symbols
    case '?': produce HELP
    case '#'
      # Single-line comment
      ch = read
      while (ch != '\n') ch = read
      restart
    others
      if (nextIs [0-9])
        scan_integer
        produce INTEGER
      endIf
  endMatch

- scan_integer
  while (nextIs [0-9_])
    ch = read
    if (ch != '_') collect ch
    if (not hasAnother) return
    ch = peek
  endWhile
  return

--------------------------------------------------------------------------------
parser
--------------------------------------------------------------------------------
- expression
  add_subtract

- add_subtract [binary]
  on "+" -> Add
  on "-" -> Subtract

- term
  on INTEGER
    if (consume(YEARS))   produce IntervalYears( value=content:Integer )
    if (consume(MONTHS))  produce IntervalMonths( value=content:Integer )
    if (consume(WEEKS))   produce IntervalWeeks( value=content:Integer )
    if (consume(DAYS))    produce IntervalDays( value=content:Integer )
    if (nextIs(MONTH))    create Day( value=content:Integer ); day_month_year; return
    if (consume('-'))     create Month(value=content:Integer); month_day_year_hyphens; return
    if (consume('/'))     create Month(value=content:Integer); month_day_year_slashes; return
    if (consume('.'))     create Month(value=content:Integer); month_day_year_dots; return
    produce IntervalDays( value=content:Integer )
  endOn
  on MONTH: create Month( value=content:Integer ); month_day_year; return
  on TODAY      -> Today
  on YESTERDAY  -> Yesterday
  on TOMORROW   -> Tomorrow
  on '(', expression, ')': return
  on HELP -> Help
  syntaxError

- month_day_year
  on INTEGER
    create Day( value=content:Integer )
    if (consume ',')
      on INTEGER
        create Year( value=content:Integer )
        produce MDY( month, day, year )
      elseOnOthers
        syntaxError "Integer year expected."
      endOn
    else
      on INTEGER
        create Year( value=content:Integer )
        produce MDY( month, day, year )
      elseOnOthers
        produce MD( month, day )
      endOn
    endIf
  endOn

- day_month_year
  consume MONTH
  create Month( value=content:Integer )
  on INTEGER
    create Year( value=content:Integer )
    produce DMY( day, month, year )
  elseOnOthers
    produce DM( day, month )
  endOn

- month_day_year_hyphens
  on INTEGER
    create Day(value=content:Integer)
    if (consume('-'))
      on INTEGER
        create Year(value=content:Integer)
        produce MDYOrYMD( month, day, year )
      endOn
    else
      produce MD( month, day )
    endIf
  endOn
  syntaxError "Integer date expected."

- month_day_year_slashes
  on INTEGER
    create Day(value=content:Integer)
    if (consume('/'))
      on INTEGER
        create Year(value=content:Integer)
        produce MDYOrYMD( month, day, year )
      endOn
    else
      produce MD( month, day )
    endIf
  endOn
  syntaxError "Integer date expected."

- month_day_year_dots
  on INTEGER
    create Day(value=content:Integer)
    if (consume('.'))
      on INTEGER
        create Year(value=content:Integer)
        produce MDYOrYMD( month, day, year )
      endOn
    else
      produce MD( month, day )
    endIf
  endOn
  syntaxError "Integer date expected."
