module Days

$define VERSION "2.2.1"
$define DATE    "October 3, 2021"

$requireRogue "2"

$include "CmdEval.rogue"
$include "DaysValue.rogue"
$include "Parser.rogue"
$include "Resolver.rogue"
$include "Scanner.rogue"
$include "Token.rogue"

Days()

class Days
  METHODS
    method init
      if (System.command_line_arguments.count)
        # Use command line args
        print_results( Parser("[Command Line]",System.command_line_arguments.join(' ')).parse )
      else
        # Interactive mode
        println "Enter h or ? for help."
        loop
          try
            local input = Console.input( "> " )
            if (input == "q") escapeLoop
            print_results( Parser("[Command Line]",input).parse )
          catch (err:Error)
            Console.error.println err
          endTry
        endLoop
      endIf

    method print_results( cmd:Cmd )
      if (not cmd) return

      cmd = Resolver().visit( cmd )
      if (cmd instanceOf MDY)
        local date = cmd.evaluate.date.value
        if (date > Date.today)
          println "$ until $, $" ("# day".pluralized(date-Date.today),date.day_name,date->String(&verbose))
        elseIf (date < Date.today)
          println "$ since $, $" ("# day".pluralized(Date.today-date),date.day_name,date->String(&verbose))
        else
          println "That's today."
        endIf
      else
        local result = cmd.evaluate
        if (result.date or result.interval)
          print result
          if (result.date)
            local date = result.date.value
            print " | $, $" (date.day_name,date->String(&verbose))
          endIf
          println
        endIf
      endIf
endClass

