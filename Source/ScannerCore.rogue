module Days

# Generated by Froley. WARNING: WILL BE OVERWRITTEN.

$include "CompileError.rogue"
$include "ScanTable.rogue"
$include "Token.rogue"
$include "TokenType.rogue"

class ScannerCore [abstract]
  DEFINITIONS
    ip_tokenize = 0
    ip_consume_whitespace = 1
    ip_scan_identifier = 2
    ip_scan_symbol = 3
    ip_scan_integer = 4

  PROPERTIES
    _filepath     : String
    _scanner      : Rogue::Scanner
    line          = 1
    column        = 1

    tokens        = Token[]
    buffer        = String()
    output        = String()

    start_ip      = 0
    halt          = false

    _position_stack  = Int32[]
    _line_stack      = Int32[]
    _column_stack    = Int32[]
    _token_pos_stack = Int32[]

    # GENERATED PROPERTIES
    ch : Character
    _scan_pattern_0 = ScanPattern( "{[a-zA-Z_][a-zA-Z0-9_]*}" )
    _scan_pattern_1 = ScanPattern( "[0-9]" )
    _scan_pattern_2 = ScanPattern( "[0-9_]" )
    _scan_table_0 = ScanTable("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")
    _scan_table_1 = ScanTable("JgAJPxQjFikYLBouHC0eKCArIi8kAQACAAMABAAFAAYABwAIAAkA")

  METHODS
    method init( file:File )
      init( file.filepath, Rogue::Scanner(file) )
      line   = 1
      column = 1

    method init( filepath:String, content:String, line=1, column=1 )
      init( filepath, Rogue::Scanner(content).[line=line, column=column] )

    method init( _filepath, _scanner )
      noAction

    method execute( ip:Int32 )
      _clear_state
      _execute( ip )

    method tokenize( ip=null:Int32? )->Token[]
      if (ip) start_ip = ip.value
      _clear_state
      while (_execute(start_ip) or not halt)
        buffer.clear
      endWhile
      _on_output_line # flush any buffered output
      return tokens

    method _add( type:TokenType )
      if (type.attributes & TokenType.ATTRIBUTE_CONTENT)
        tokens.add( _t(type,buffer.cloned) )
      else
        tokens.add( _t(type) )
      endIf
      buffer.clear

    method _clear_state
      tokens = Token[]
      buffer.clear
      output.clear
      halt = false

    method _describe_character( c:Character )->String
      if (c == 10 or c == 13)       return "end of line";
      elseIf (c >= 32 and c != 127) return "'$'" (c)
      else                          return "'$'" (c.to_escaped_ascii)

    method _discard_position
      if (_position_stack.is_empty)
        _throw_syntax_error( "discardPosition without prior savePosition." )
      endIf
      _position_stack.remove_last
      _line_stack.remove_last
      _column_stack.remove_last
      _token_pos_stack.remove_last

    method _is_next( text:String )->Logical
      local location = _scanner.location
      local result = _scanner.consume( text )
      _scanner.location = location
      return result

    method _must_consume( ch:Character )
      if (_scanner.consume(ch)) return
      local message = "Syntax error - expected $, found " (_describe_character(ch))
      if (_scanner.has_another) message += _describe_character(_scanner.peek) + "."
      else                      message += "end of input."
      throw CompileError( message, _filepath, _scanner.source, _scanner.line, _scanner.column )

    method _must_consume( st:String )
      if (_scanner.consume(st)) return
      _throw_expected_string_error( "'$'" (st.to_escaped_ascii("'")) )

    method _must_consume( pattern:ScanPattern )
      if (pattern.scan(_scanner)) return
      _throw_expected_string_error( pattern->String )

    method _next_is( text:String )->Logical
      if (not _scanner.has_another(text.count)) return false
      local pos = _scanner.position
      forEach (ch at index in text)
        if (ch != _scanner.data[pos+index]) return false
      endForEach
      return true

    method _on_output_line
      # Default behavior: print out 'output' and clear it. Can override this method.
      print( output )
      flush
      output.clear

    method _restore_position
      if (_position_stack.is_empty)
        _throw_syntax_error( "restorePosition without prior savePosition." )
      endIf
      _scanner.position = _position_stack.remove_last
      _scanner.line     = _line_stack.remove_last
      _scanner.column   = _column_stack.remove_last
      tokens.discard_from( _token_pos_stack.remove_last )

    method _save_position
      _position_stack.add( _scanner.position )
      _line_stack.add( _scanner.line )
      _column_stack.add( _scanner.column )
      _token_pos_stack.add( tokens.count )

    method _scan( ch:Character )->Logical
      if (not _scanner.consume(ch)) return false
      buffer.print ch
      return true

    method _scan( text:String )->Logical
      if (not _scanner.consume(text)) return false
      buffer.print text
      return true

    method _t( type:TokenType, content=null:String )->Token
      return Token( type, _filepath, _scanner.source, line, column, content )

    method _throw_expected_string_error( st:String )
      local message = "Syntax error - expected $, found " (st)
      if (_scanner.has_another) message += _describe_character(_scanner.peek) + "."
      else                      message += "end of input."
      throw CompileError( message, _filepath, _scanner.source, _scanner.line, _scanner.column )

    method _throw_syntax_error( message=null:String )
      if (not message)
        local builder = String()
        builder.print "Syntax error - unexpected "
        if (not _scanner.has_another)
          builder.println "end of input."
        else
          builder.[ print(_describe_character(_scanner.peek)), print('.') ]
        endIf
        message = builder
      endIf
      throw CompileError( message, _filepath, _scanner.source, _scanner.line, _scanner.column )

    method _execute( ip:Int32 )->Logical
      which (ip)
        case ip_tokenize: return r_tokenize
        case ip_consume_whitespace: return r_consume_whitespace
        case ip_scan_identifier: return r_scan_identifier
        case ip_scan_symbol: return r_scan_symbol
        case ip_scan_integer: return r_scan_integer
        others
          halt = true
          return false
      endWhich

    method r_tokenize->Logical
      if (not r_consume_whitespace) return false
      line   = _scanner.line
      column = _scanner.column
      if ((not _scanner.has_another))
        halt = true
        return false
      endIf
      if (not r_scan_identifier) return false
      if (not r_scan_symbol) return false
      _throw_syntax_error
      return false
      return true

    method r_consume_whitespace->Logical
      while ((((_scanner.consume(' ') or _scanner.consume('\t')) or _scanner.consume('\n')) or _scanner.consume('\r')))
      endWhile
      return true

    method r_scan_identifier->Logical
      ch = _scanner.peek
      if (_scan_pattern_0.scan(_scanner,buffer))
        _scan_table_0.reset
        contingent
          necessary (_scan_table_0.accept(forEach in buffer))
          which (_scan_table_0.product)
            case 1
              buffer.clear
              buffer.print ""
              buffer.print("1")
              _add( TokenType.MONTH )
              return false
            case 2
              buffer.clear
              buffer.print ""
              buffer.print("2")
              _add( TokenType.MONTH )
              return false
            case 3
              buffer.clear
              buffer.print ""
              buffer.print("3")
              _add( TokenType.MONTH )
              return false
            case 4
              buffer.clear
              buffer.print ""
              buffer.print("4")
              _add( TokenType.MONTH )
              return false
            case 5
              buffer.clear
              buffer.print ""
              buffer.print("5")
              _add( TokenType.MONTH )
              return false
            case 6
              buffer.clear
              buffer.print ""
              buffer.print("6")
              _add( TokenType.MONTH )
              return false
            case 7
              buffer.clear
              buffer.print ""
              buffer.print("7")
              _add( TokenType.MONTH )
              return false
            case 8
              buffer.clear
              buffer.print ""
              buffer.print("8")
              _add( TokenType.MONTH )
              return false
            case 9
              buffer.clear
              buffer.print ""
              buffer.print("9")
              _add( TokenType.MONTH )
              return false
            case 10
              buffer.clear
              buffer.print ""
              buffer.print("10")
              _add( TokenType.MONTH )
              return false
            case 11
              buffer.clear
              buffer.print ""
              buffer.print("11")
              _add( TokenType.MONTH )
              return false
            case 12
              buffer.clear
              buffer.print ""
              buffer.print("12")
              _add( TokenType.MONTH )
              return false
            case 13
              buffer.clear
              buffer.print ""
              buffer.print("1")
              _add( TokenType.MONTH )
              return false
            case 14
              buffer.clear
              buffer.print ""
              buffer.print("2")
              _add( TokenType.MONTH )
              return false
            case 15
              buffer.clear
              buffer.print ""
              buffer.print("3")
              _add( TokenType.MONTH )
              return false
            case 16
              buffer.clear
              buffer.print ""
              buffer.print("4")
              _add( TokenType.MONTH )
              return false
            case 17
              buffer.clear
              buffer.print ""
              buffer.print("6")
              _add( TokenType.MONTH )
              return false
            case 18
              buffer.clear
              buffer.print ""
              buffer.print("7")
              _add( TokenType.MONTH )
              return false
            case 19
              buffer.clear
              buffer.print ""
              buffer.print("8")
              _add( TokenType.MONTH )
              return false
            case 20
              buffer.clear
              buffer.print ""
              buffer.print("9")
              _add( TokenType.MONTH )
              return false
            case 21
              buffer.clear
              buffer.print ""
              buffer.print("10")
              _add( TokenType.MONTH )
              return false
            case 22
              buffer.clear
              buffer.print ""
              buffer.print("11")
              _add( TokenType.MONTH )
              return false
            case 23
              buffer.clear
              buffer.print ""
              buffer.print("12")
              _add( TokenType.MONTH )
              return false
            case 24
              _add( TokenType.DAYS )
              return false
            case 25
              _add( TokenType.MONTHS )
              return false
            case 26
              _add( TokenType.WEEKS )
              return false
            case 27
              _add( TokenType.YEARS )
              return false
            case 28
              _add( TokenType.DAYS )
              return false
            case 29
              _add( TokenType.MONTHS )
              return false
            case 30
              _add( TokenType.WEEKS )
              return false
            case 31
              _add( TokenType.YEARS )
              return false
            case 32
              _add( TokenType.MONTHS )
              return false
            case 33
              _add( TokenType.WEEKS )
              return false
            case 34
              _add( TokenType.HELP )
              return false
            case 35
              _add( TokenType.DAYS )
              return false
            case 36
              _add( TokenType.MONTHS )
              return false
            case 37
              _add( TokenType.WEEKS )
              return false
            case 38
              _add( TokenType.YEARS )
              return false
            case 39
              _add( TokenType.TODAY )
              return false
            case 40
              _add( TokenType.TOMORROW )
              return false
            case 41
              _add( TokenType.YESTERDAY )
              return false
            case 42
              _add( TokenType.HELP )
              return false
            others
              necessary (false)
          endWhich
        unsatisfied
          _add( TokenType.IDENTIFIER )
          return false
        endContingent
      endIf
      return true

    method r_scan_symbol->Logical
      _scan_table_1.reset
      contingent
        block n=1
          while (_scanner.has_another(n))
            if (not _scan_table_1.accept(_scanner.peek(n-1)))
              escapeWhile
            endIf
            ++n
          endWhile
          necessary (_scan_table_1.has_product)
          loop (_scan_table_1.match_count) _scanner.read
        endBlock
        which (_scan_table_1.product)
          case 1
            _add( TokenType.HELP )
            return false
          case 2
            ch = _scanner.read
            while ((ch!='\n'))
              ch = _scanner.read
            endWhile
            return false
          case 3
            _add( TokenType.SYMBOL_CLOSE_PAREN )
            return false
          case 4
            _add( TokenType.SYMBOL_COMMA )
            return false
          case 5
            _add( TokenType.SYMBOL_DOT )
            return false
          case 6
            _add( TokenType.SYMBOL_MINUS )
            return false
          case 7
            _add( TokenType.SYMBOL_OPEN_PAREN )
            return false
          case 8
            _add( TokenType.SYMBOL_PLUS )
            return false
          case 9
            _add( TokenType.SYMBOL_SLASH )
            return false
          others
            necessary (false)
        endWhich
      unsatisfied
        if (_scan_pattern_1.is_next(_scanner))
          if (not r_scan_integer) return false
          _add( TokenType.INTEGER )
          return false
        endIf
      endContingent

    method r_scan_integer->Logical
      while (_scan_pattern_2.is_next(_scanner))
        ch = _scanner.read
        if ((ch!='_'))
          buffer.print(ch)
        endIf
        if ((not _scanner.has_another))
          return true
        endIf
        ch = _scanner.peek
      endWhile
      return true

endClass
